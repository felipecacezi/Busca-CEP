{"version":3,"sources":["img/logoTitle.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","cep","setCep","rua","setRua","cidade","setCidade","uf","setUf","show","setShow","conteudo","setConteudo","table","setTable","condInputs","setCondInputs","FormControl","className","type","placeholder","disabled","inputs","setInputs","handleClose","pesquisar","numero_cep","nome_rua","nome_cidade","sigla_uf","validacao","axios","get","then","response","list_table","data","itens","i","lines","push","key","ibge","logradouro","bairro","localidade","length","src","logo","as","onClick","onChange","e","target","value","controla_inputs","currentTarget","Button","variant","Table","bg","responsive","bordered","striped","Modal","onHide","Header","closeButton","Title","Body","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00b24038.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoTitle.2841cba2.png\";","import React, {useState} from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { Button, Form, FormControl, Table, Modal, ModalDialog, ModalHeader, ModalTitle, ModalBody, ModalFooter } from 'react-bootstrap';\nimport axios from 'axios';\n\n\n\nimport logo from './img/logoTitle.png'\n\nfunction App() {\n\n  const [cep, setCep]               = useState('');\n  const [rua, setRua]               = useState('');\n  const [cidade, setCidade]         = useState('');\n  const [uf, setUf]                 = useState('');\n  const [show, setShow]             = useState(false);\n  const [conteudo, setConteudo]     = useState('');\n  const [table, setTable]           = useState('');\n  const [condInputs, setCondInputs] = useState(0);\n  const [inputs, setInputs]         = useState(<FormControl className=\"txt\" type=\"text\" placeholder=\"Escolha o tipo de pesquisa\" disabled />);  \n  const handleClose                 = () => setShow(false);\n\n  function pesquisar(){\n\n    let numero_cep  = cep;\n    let nome_rua    = rua;\n    let nome_cidade = cidade;\n    let sigla_uf    = uf;\n\n    validacao(condInputs, numero_cep, nome_rua, nome_cidade, sigla_uf)\n   \n    switch(condInputs){\n      case '0':\n      break;\n      case '1':\n\n        axios.get(\"http://viacep.com.br/ws/\"+numero_cep+\"/json/\")\n           .then(function (response) {\n              list_table(response.data);\n        })\n\n      break;\n      case '2':\n\n        axios.get(\"http://viacep.com.br/ws/\"+sigla_uf+\"/\"+nome_cidade+\"/\"+nome_rua+\"/json/\")\n        .then(function (response) {          \n          list_table(response.data);\n        })\n\n      break;\n    }\n\n    \n  }\n\n  function validacao(condInputs, numero_cep, nome_rua, nome_cidade, sigla_uf){\n\n    if(condInputs == '0'){\n      setConteudo('Selecione um tipo de pesquisa!')\n      setShow(true)\n      return false;\n    } else if (condInputs == '1' && !numero_cep){\n      setConteudo('CEP inv치lido')\n      setShow(true)\n      return false;\n    } else if (condInputs == '2'){\n\n      if(!nome_rua){\n        setConteudo('Rua inv치lida')\n        setShow(true)\n        return false;\n      } else if(!nome_cidade){\n        setConteudo('Cidade inv치lida')\n        setShow(true)\n        return false;\n      } else if(!sigla_uf){\n        setConteudo('UF inv치lida')\n        setShow(true)\n        return false;\n      }\n\n    }\n\n  }\n\n  function list_table(itens){\n\n    let i = 0;\n    let lines = [];\n    let reps = '';\n\n    \n      switch(condInputs){\n        case '0':\n          lines.push();\n        break;\n        case '1':\n  \n          lines.push(<tr key={itens.cep}>\n            <td>{itens.cep}</td>\n            <td>{itens.ibge}</td>\n            <td>{itens.logradouro}</td>\n            <td>{itens.bairro}</td>\n            <td>{itens.uf}</td>\n            <td>{itens.localidade}</td>\n          </tr>)\n  \n        break;\n        case '2':          \n  \n          for(i=0; i <= itens.length; i++){\n              \n            if(itens[i]){\n\n              lines.push( <tr key={itens[i].cep}>\n                            <td>{itens[i].cep}</td>\n                            <td>{itens[i].ibge}</td>\n                            <td>{itens[i].logradouro}</td>\n                            <td>{itens[i].bairro}</td>\n                            <td>{itens[i].uf}</td>\n                            <td>{itens[i].localidade}</td>\n                          </tr>)\n\n            }\n\n          }          \n  \n        break;\n      }\n   \n    setTable(lines)\n\n  }\n\n  function controla_inputs(){\n\n    let inputs = [];\n\n    setInputs('')\n\n    switch(condInputs){\n       case '0':\n\n        inputs.push(<FormControl key={1} className=\"txt\" type=\"text\" placeholder=\"Escolha o tipo de pesquisa\" disabled />);\n\n       break;\n       case '1':\n\n         inputs.push(<FormControl key={2} placeholder=\"Digite um CEP ( 13474000 )\" onChange={ e => setCep(e.target.value) } className=\"txt\" type=\"text\" />);\n\n       break;\n       case '2':\n\n         inputs.push(<FormControl key={3} onChange={ e => setRua(e.target.value) } className=\"txt\" placeholder=\"Rua\"/>);\n         inputs.push(<FormControl key={4} onChange={ e => setCidade(e.target.value) } className=\"txt\" placeholder=\"Cidade\"/>);\n         inputs.push(<FormControl key={5} onChange={ e => setUf(e.target.value) } className=\"txt\" placeholder=\"UF\"/>);\n        \n       break;\n       default:\n        inputs.push(<FormControl key={1} className=\"txt\" type=\"text\" placeholder=\"Escolha o tipo de pesquisa\" disabled />);\n       break;\n     }\n\n     setInputs(inputs)\n\n  }\n  \n  return (\n    <div className=\"App\">\n      \n      <div className=\"top-bar\">\n          <img src={logo} className=\"img-logo\" />          \n      </div>\n      \n\n      <div className=\"container-pesquisar\">\n\n        <div className=\"container-tipo\">\n\n          <FormControl as=\"select\" className=\"slc-tipo\" onClick={ ()=>{controla_inputs()} }  onChange={ e => setCondInputs(e.currentTarget.value) }>\n            <option value=\"0\">Tipo de Pesquisa</option>\n            <option value=\"1\">CEP</option>\n            <option value=\"2\">Endere칞o</option>\n          </FormControl>\n\n        </div>\n\n        <div className=\"container-input\">\n          {inputs}\n        </div>\n        <div className=\"container-btn-pesquisar\">\n        <Button variant=\"primary\" className=\"btn-pesquisar\" onClick={ () =>{pesquisar()} } type=\"button\">Pesquisar</Button>\n        </div>\n\n      </div>\n\n      <div className=\"container-resultado-pesquisa\">\n\n        <Table bg=\"primary\" responsive bordered striped>\n          <thead>\n            <tr>\n              <th>CEP</th>\n              <th>N췈 IBGE</th>\n              <th>Logradouro</th>\n              <th>Bairro</th>\n              <th>Unidade Federativa</th>\n              <th>Municipio</th>\n            </tr>\n          </thead>\n          <tbody>\n            {table}\n          </tbody>\n        </Table>\n\n      </div>\n      { show ?  <Modal show={show} onHide={handleClose}>\n                  \n                  <Modal.Header closeButton>\n                    <Modal.Title>Aten칞칚o</Modal.Title>\n                  </Modal.Header>\n\n                  <Modal.Body>{conteudo}</Modal.Body>\n\n                  <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                      Fechar\n                    </Button>            \n                  </Modal.Footer>\n\n                </Modal> : null}\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}